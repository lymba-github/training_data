{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the top 5 highest rated movies released in the 21st century. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[r:RATED]-(u:User) WHERE m.year >= 2000 AND m.year <= 2100 RETURN m.title, AVG(r.rating) AS average_rating ORDER BY average_rating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the genres of movies that Tom Hanks has acted in. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN DISTINCT g.name AS genre"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the movies that were directed by Steven Spielberg and also have Tom Hanks as an actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Steven Spielberg'})-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor {name: 'Tom Hanks'}) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow the actors who played in action movies released in the 2000s. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Action'}) WHERE m.year >= 2000 AND m.year < 2010 MATCH (m)<-[:ACTED_IN]-(a:Actor) RETURN DISTINCT a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow the top 5 highest-grossing movies directed by Christopher Nolan. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) WHERE m.revenue IS NOT NULL RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the actors who have appeared in both drama and comedy movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g1:Genre {name: 'Drama'})<-[:IN_GENRE]-(m1:Movie)<-[:ACTED_IN]-(a:Actor) WITH a MATCH (g2:Genre {name: 'Comedy'})<-[:IN_GENRE]-(m2:Movie)<-[:ACTED_IN]-(a:Actor) RETURN DISTINCT a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the countries in which movies directed by Quentin Tarantino have been filmed. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Quentin Tarantino'})-[:DIRECTED]->(m:Movie) UNWIND m.countries AS country RETURN DISTINCT country"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the average rating of movies released in each year in the 21st century. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year >= 2000 AND m.year < 2100 WITH m.year AS releaseYear, COALESCE(m.imdbRating, 0) AS rating RETURN releaseYear, AVG(rating) AS averageRating ORDER BY releaseYear"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors who have acted in movies directed by both Steven Spielberg and Christopher Nolan. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m1:Movie)<-[:DIRECTED]-(d1:Director {name: 'Steven Spielberg'}) WITH a, m1 MATCH (a)-[:ACTED_IN]->(m2:Movie)<-[:DIRECTED]-(d2:Director {name: 'Christopher Nolan'}) RETURN DISTINCT a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the top 5 highest-rated movies of the 'Action' genre released in the 2010s. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) WHERE m.year >= 2010 AND m.year < 2020 WITH m, COALESCE(m.imdbRating, 0) AS rating RETURN m.title AS title, m.year AS releaseYear, rating ORDER BY rating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors who have appeared in more than 5 movies in the 21st century. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.year >= 2000 AND m.year <= 2100 WITH a, COUNT(m) AS movie_count WHERE movie_count > 5 RETURN a.name, movie_count"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the average budget of movies directed by Christopher Nolan. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) WHERE m.budget IS NOT NULL RETURN AVG(m.budget) AS average_budget"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow the genres of movies in which Tom Hanks and Robin Wright have both acted. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (t:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(tm:Movie) MATCH (m:Actor {name: 'Robin Wright'})-[:ACTED_IN]->(mm:Movie) WITH tm, mm WHERE tm = mm MATCH (tm)-[:IN_GENRE]->(genre:Genre) RETURN DISTINCT genre.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the top 5 highest-grossing movies with a runtime of over 2 hours. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.runtime > 120 AND m.revenue IS NOT NULL RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the actors who have appeared in movies with a budget over $100 million and have a rating of at least 8.0. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget > 100000000 AND m.imdbRating >= 8.0 RETURN DISTINCT a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the directors who have directed movies in multiple languages. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE SIZE(m.languages) > 1 RETURN DISTINCT d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the movies that were released in the same year as 'Inception' and have the same genre as 'Inception'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (inception:Movie {title: 'Inception'}) MATCH (inception)-[:IN_GENRE]->(genre:Genre) MATCH (similar:Movie {year: inception.year}) WHERE (similar)-[:IN_GENRE]->(genre) AND NOT similar = inception RETURN similar.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the average rating of movies released in each decade since the 1960s. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year >= 1960 WITH m.year AS releaseYear, COALESCE(m.imdbRating, 0) AS rating WITH releaseYear, rating, (releaseYear / 10) * 10 AS decade RETURN decade, AVG(rating) AS averageRating ORDER BY decade"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the actors who have acted in movies in which the budget is at least 10 times the average budget of all movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WITH AVG(m.budget) * 10 AS threshold, a, m WHERE m.budget >= threshold RETURN DISTINCT a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the movies that have been released in more than one language and have a runtime of at least 150 minutes. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE SIZE(m.languages) > 1 AND m.runtime >= 150 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the actors who have appeared in at least one movie in each decade since the 1970s (i.e., 1970s, 1980s, 1990s, 2000s, 2010s). [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.year >= 1970 AND m.year <= 2020 WITH a, COLLECT(DISTINCT SUBSTRING(toString(m.year), 0, 4)) AS decades WHERE SIZE(decades) = 5 RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the directors who have directed both high-budget (budget > $100 million) and low-budget (budget < $10 million) movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WITH d, COLLECT(DISTINCT CASE WHEN m.budget > 100000000 THEN 'high-budget' WHEN m.budget < 10000000 THEN 'low-budget' END) AS budgets WHERE 'high-budget' IN budgets AND 'low-budget' IN budgets RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the top 5 highest-rated directors based on the average rating of their movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WITH d, COLLECT(COALESCE(m.imdbRating, 0)) AS ratings WITH d, ratings, REDUCE(s = 0, rating IN ratings | s + rating) AS totalRating WITH d, ratings, totalRating, SIZE(ratings) AS numberOfMovies WITH d, totalRating / numberOfMovies AS averageRating RETURN d.name AS directorName, averageRating ORDER BY averageRating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors who have acted in movies with the highest and lowest budgets in the dataset. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE NOT m.budget IS NULL WITH a, m, COLLECT(m) AS movies ORDER BY m.budget ASC WITH a, movies[0] AS lowestBudgetMovie RETURN a.name AS ActorName, lowestBudgetMovie.title AS MovieTitle, lowestBudgetMovie.budget AS Budget ORDER BY Budget ASC UNION MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE NOT m.budget IS NULL WITH a, m, COLLECT(m) AS movies ORDER BY m.budget DESC WITH a, movies[0] AS highestBudgetMovie RETURN a.name AS ActorName, highestBudgetMovie.title AS MovieTitle, highestBudgetMovie.budget AS Budget ORDER BY Budget DESC"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the movies in which the actor Robert De Niro has played a gangster role. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Robert De Niro'})-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre {name: 'Crime'}) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the actors who have appeared in at least one movie in each genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) WHERE ALL(genre IN apoc.coll.toSet([(a)-[:ACTED_IN]->(:Movie)-[:IN_GENRE]->(g:Genre) | g.name]) WHERE genre IS NOT NULL) RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all the genres and their movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie) RETURN g.name, COLLECT(DISTINCT m.title) AS movies"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the top-rated movies by a user named 'John'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User {name: 'John'})-[:RATED]->(m:Movie) RETURN m.title ORDER BY m.imdbRating DESC LIMIT 10"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies released in the year 2000 with a budget greater than 50 million. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {year: 2000}) WHERE m.budget > 5000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve information about movies in the 'Action' genre with more than 7.5 IMDb rating. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) WHERE m.imdbRating > 7.5 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow movies directed by 'James Cameron' that have generated over 500 million in revenue. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'James Cameron'})-[:DIRECTED]->(m:Movie) WHERE m.revenue > 500000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all users who have rated 'Inception'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:RATED]-(u:User) RETURN u.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve details of actors born in 'New York' who have acted in at least one movie. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {bornIn: 'New York'})-[:ACTED_IN]->(m:Movie) RETURN a.name, COLLECT(DISTINCT m.title) AS movies"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me movies that have 'Tom Hanks' as an actor and 'Steven Spielberg' as a director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor {name: 'Tom Hanks'}), (m)<-[:DIRECTED]-(d:Director {name: 'Steven Spielberg'}) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies with 'Action' and 'Sci-Fi' genres released in the 21st century. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.year >= 2000 AND m.year < 2100 AND g.name IN ['Action', 'Sci-Fi'] RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the names of all genres. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre) RETURN DISTINCT g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the top 5 movies with the highest IMDb votes. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbVotes IS NOT NULL RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGet the biography of the actor named 'Tom Hanks.' [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'}) RETURN a.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies released in 2007 with a runtime over than 150 minutes. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2007 AND m.runtime > 150 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the genres of the movie with the title '12 Angry Men'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: '12 Angry Men'})-[:IN_GENRE]->(g:Genre) RETURN g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all users who have rated movies and the number of movies they have rated. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) RETURN u.name, COUNT(m) AS numRatings"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGet the names of directors who were born in the United States. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) WHERE d.bornIn = 'United States' RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies that 'Tom Cruise' acted in and were released in the 2000s. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Cruise'})-[:ACTED_IN]->(m:Movie) WHERE m.year >= 2000 AND m.year < 2010 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the countries where movies have been released. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.countries IS NOT NULL UNWIND m.countries AS country RETURN DISTINCT country"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFor the top 10 directors who have the highest average IMDb ratings of their movies, list the names of actors they have worked with. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.name IS NOT NULL WITH d, AVG(COALESCE(m.imdbRating,0)) AS avgRating ORDER BY avgRating DESC LIMIT 10 MATCH (m)<-[:ACTED_IN]-(a:Actor) RETURN d.name AS directorName, COLLECT(DISTINCT a.name) AS actorsWorkedWith"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the genres and the directors who have made their maximum films in that genre [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) WITH g, d, COUNT(m) AS movieCount ORDER BY g.name, movieCount DESC WITH g, COLLECT({name: d.name, count: movieCount})[0] AS topDirector RETURN g.name AS Genre, topDirector.name AS Director, topDirector.count AS MovieCount"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFor each user, list the user and their movie of the highest rating, and the actors in that film. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) WITH u, m ORDER BY m.imdbRating DESC WITH u, COLLECT(m)[0] AS topRatedMovie MATCH (topRatedMovie)<-[:ACTED_IN]-(a:Actor) RETURN u.name, topRatedMovie.title, COLLECT(a.name) AS actors"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFor crime genre movie, list the movies which has been most number of users that have rated it [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Crime'})<-[:IN_GENRE]-(m:Movie)<-[:RATED]-(u:User) WITH m, COUNT(u) AS numRatings ORDER BY numRatings DESC RETURN m.title AS movieTitle, numRatings"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the movies which has been directed by and acted in by the same person [/INST]\n\nCypher:\n</s>", "completion": "MATCH (p:Person)-[:DIRECTED|:ACTED_IN]->(m:Movie) WHERE (p)-[:DIRECTED]->() AND (p)-[:ACTED_IN]->() RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFor every director, find the actor who they have collaborated with the most [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) WITH d, a, COUNT(*) AS collaborationCount ORDER BY collaborationCount DESC RETURN d.name, COLLECT(a.name)[0] AS mostCollaboratedActor"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve all movies directed by Christopher Nolan. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the top-rated movies with an IMDb rating of 8 or higher. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating >= 8 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 10"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies released in the year 2016. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2016 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow movies in the 'Action' genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve all actors who appeared in the movie 'Inception'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:ACTED_IN]-(a:Actor) RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies with a budget of over $100 million. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies where Tom Hanks acted. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve movies in which 'Leonardo DiCaprio' and 'Joseph Gordon-Levitt' acted together. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a1:Actor {name: 'Leonardo DiCaprio'})-[:ACTED_IN]->(m:Movie) MATCH (a2:Actor {name: 'Joseph Gordon-Levitt'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies in which 'James Cameron' directed and 'Sigourney Weaver' acted. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'James Cameron'})-[:DIRECTED]->(m:Movie) MATCH (a:Actor {name: 'Sigourney Weaver'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the top 5 highest-rated movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the genres available in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre) RETURN g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWho directed the movie with the title 'Inception'? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:DIRECTED]-(d:Director) RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWhat is the plot of the movie with the title 'The Shawshank Redemption'? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'The Shawshank Redemption'}) RETURN m.plot"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all users who have rated movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) RETURN DISTINCT u.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies with 'Thriller' genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Thriller'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me movies similar to 'Avatar' (limited to 3). [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Avatar'})-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie) WITH rec, COUNT(*) AS score RETURN rec.title ORDER BY score DESC LIMIT 3"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the bio of each actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the birth details of each actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.born, a.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the bio of each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the birth details of each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.born, d.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFor each movie list the languages and countries it was released in [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) RETURN m.title, m.languages, m.countries"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the genres of every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m.title, COLLECT(g.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the director's every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:DIRECTED]-(d:Director) RETURN d.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors's every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN a.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors of every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m.title, COLLECT(a.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve all movies directed by Christopher Nolan. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the top-rated movies with an IMDb rating of 8 or higher. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating >= 8 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 10"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies released in the year 2016. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2016 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow movies in the 'Action' genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve all actors who appeared in the movie 'Inception'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:ACTED_IN]-(a:Actor) RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies with a budget of over $100 million. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies where Tom Hanks acted. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve movies in which 'Leonardo DiCaprio' and 'Joseph Gordon-Levitt' acted together. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a1:Actor {name: 'Leonardo DiCaprio'})-[:ACTED_IN]->(m:Movie) MATCH (a2:Actor {name: 'Joseph Gordon-Levitt'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies in which 'James Cameron' directed and 'Sigourney Weaver' acted. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'James Cameron'})-[:DIRECTED]->(m:Movie) MATCH (a:Actor {name: 'Sigourney Weaver'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the top 5 highest-rated movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the genres available in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre) RETURN g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWho directed the movie with the title 'Inception'? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:DIRECTED]-(d:Director) RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWhat is the plot of the movie with the title 'The Shawshank Redemption'? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'The Shawshank Redemption'}) RETURN m.plot"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all users who have rated movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) RETURN DISTINCT u.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies with 'Thriller' genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Thriller'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me movies similar to 'Avatar' (limited to 3). [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Avatar'})-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie) WITH rec, COUNT(*) AS score RETURN rec.title ORDER BY score DESC LIMIT 3"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the bio of each actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the birth details of each actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.born, a.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the bio of each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the birth details of each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.born, d.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFor each movie list the languages and countries it was released in [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) RETURN m.title, m.languages, m.countries"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the genres of every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m.title, COLLECT(g.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the director's every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:DIRECTED]-(d:Director) RETURN d.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors's every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN a.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the actors of every movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m.title, COLLECT(a.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWhat are the top 5 movies with the highest ratings? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nCan you provide a list of 5 highly-rated movies? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nI'd like to see the top 5 movies with the highest IMDb ratings, please. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating IS NOT NULL RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve a list of all genres in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre) RETURN g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me all the genres stored in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre) RETURN g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nDisplay the available genres in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre) RETURN g.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nCan you tell me the director of the film titled 'Inception'? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:DIRECTED]-(d:Director) RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide me with the name of the director for the movie 'Inception.' [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:DIRECTED]-(d:Director) RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nI'd like to know who was the director of the movie 'Inception.' [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:DIRECTED]-(d:Director) RETURN d.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWhat is the storyline of the film 'The Shawshank Redemption'? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'The Shawshank Redemption'}) RETURN m.plot"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nCan you tell me the synopsis of 'The Shawshank Redemption' movie? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'The Shawshank Redemption'}) RETURN m.plot"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide me with the summary of the film titled 'The Shawshank Redemption.' [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'The Shawshank Redemption'}) RETURN m.plot"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve users who have provided ratings for movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) RETURN DISTINCT u.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList users who have given ratings to films. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) RETURN DISTINCT u.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me all individuals who have reviewed movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (u:User)-[:RATED]->(m:Movie) RETURN DISTINCT u.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me movies categorized as 'Thriller'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Thriller'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind films in the 'Thriller' genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Thriller'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve a list of 'Thriller' genre movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Thriller'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind 3 movies that are similar to 'Avatar'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Avatar'})-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie) WITH rec, COUNT(*) AS score RETURN rec.title ORDER BY score DESC LIMIT 3"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRecommend 3 movies like 'Avatar'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Avatar'})-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie) WITH rec, COUNT(*) AS score RETURN rec.title ORDER BY score DESC LIMIT 3"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me films akin to 'Avatar' (limited to 3). [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Avatar'})-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie) WITH rec, COUNT(*) AS score RETURN rec.title ORDER BY score DESC LIMIT 3"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide the biographical information for each actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nI need the actor profiles, including their biographies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the bios of all the actors in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the birth details of each actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.born, a.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the birth information for all actors. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.born, a.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the birth data for every actor in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor) RETURN a.name, a.born, a.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nWhat is the biography of each director? [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide me with the directors' biographies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nTell me about the directors' life stories. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.bio"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nGive me the birth details of each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.born, d.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide the birth information for all directors. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.born, d.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nI want to see the birth data for every director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director) RETURN d.name, d.born, d.bornIn"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the actors in each movie [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m.title, COLLECT(a.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the names of actors for all movies [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m.title, COLLECT(a.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow the cast of actors in every film [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m.title, COLLECT(a.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the movies in which each actor has acted. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me all the films that each actor has been a part of. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve a list of movies for every actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve a list of all the movies directed by each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all movies made by each director. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the complete list of movies that each director has directed. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name, COLLECT(m.title)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the genres associated with all movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m.title, COLLECT(g.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the genres for each and every movie. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m.title, COLLECT(g.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide a list of movie genres for all films. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m.title, COLLECT(g.name)"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList the languages and countries of release for each movie. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) RETURN m.title, m.languages, m.countries"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide the languages and release countries for all movies in the database. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) RETURN m.title, m.languages, m.countries"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the languages and countries of release for every movie entry. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) RETURN m.title, m.languages, m.countries"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all films that Christopher Nolan has directed. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind all the movies helmed by Christopher Nolan. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the films that Christopher Nolan is the director of. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'Christopher Nolan'})-[:DIRECTED]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind movies with IMDb ratings of 8 or above that are highly rated. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating >= 8 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 10"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the best-rated films on IMDb with a rating of at least 8. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating >= 8 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 10"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me top movies rated 8 or higher on IMDb. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.imdbRating >= 8 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 10"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList films that came out in 2016. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2016 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide a list of movies from the year 2016. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2016 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me movies released in 2016. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2016 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve a list of films that were released in 2016. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.year = 2016 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList 'Action' genre movies. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nDisplay films categorized under 'Action' genre. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nProvide a list of movies in the 'Action' category. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (g:Genre {name: 'Action'})<-[:IN_GENRE]-(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind the actors who starred in the film 'Inception'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:ACTED_IN]-(a:Actor) RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList all the actors that appeared in 'Inception' movie. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:ACTED_IN]-(a:Actor) RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me the actors who played roles in the movie 'Inception'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie {title: 'Inception'})<-[:ACTED_IN]-(a:Actor) RETURN a.name"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve the titles of movies with a budget exceeding $100 million. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList films that have a budget greater than $100 million. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nLocate movies with a budget higher than $100 million. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList films in which Tom Hanks performed. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve a list of movies featuring Tom Hanks as an actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me films where Tom Hanks had a role. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind films in which 'Leonardo DiCaprio' and 'Joseph Gordon-Levitt' shared the screen. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a1:Actor {name: 'Leonardo DiCaprio'})-[:ACTED_IN]->(m:Movie) MATCH (a2:Actor {name: 'Joseph Gordon-Levitt'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList movies where 'Leonardo DiCaprio' and 'Joseph Gordon-Levitt' collaborated as actors. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a1:Actor {name: 'Leonardo DiCaprio'})-[:ACTED_IN]->(m:Movie) MATCH (a2:Actor {name: 'Joseph Gordon-Levitt'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nShow me films in which both 'Leonardo DiCaprio' and 'Joseph Gordon-Levitt' appeared. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (a1:Actor {name: 'Leonardo DiCaprio'})-[:ACTED_IN]->(m:Movie) MATCH (a2:Actor {name: 'Joseph Gordon-Levitt'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nFind films directed by 'James Cameron' and acted in by 'Sigourney Weaver'. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'James Cameron'})-[:DIRECTED]->(m:Movie) MATCH (a:Actor {name: 'Sigourney Weaver'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nRetrieve movies where 'James Cameron' was the director and 'Sigourney Weaver' had a role. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'James Cameron'})-[:DIRECTED]->(m:Movie) MATCH (a:Actor {name: 'Sigourney Weaver'})-[:ACTED_IN]->(m) RETURN m.title"}
{"prompt": "<s>[INST]Given this Neo4j graph database schema:\n\ntype Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  budget: Int, countries: [String], imdbId: ID, imdbRating: Float, imdbVotes: Int,\n  languages: [String], movieId: ID!, plot: String, poster: String, released: String,\n  revenue: Int, runtime: Int, title: String, tmdbId: String, url: String, year: Int,\n  genres: [Genre!]! @relationship(type: \"IN_GENRE\", direction: OUT),\n  actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN),\n  directors: [Director!]! @relationship(type: \"DIRECTED\", direction: IN),\n  similar(first: Int = 3): [Movie] @cypher(\n    statement: \"\"\"\n    MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)\n    WITH rec, COUNT(*) AS score\n    RETURN rec ORDER BY score DESC LIMIT $first\n    \"\"\"\n  )\n}}\n\ntype Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  name: String, movies: [Movie!]! @relationship(type: \"IN_GENRE\", direction: IN)\n}}\n\ntype User @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  userId: ID!, name: String, rated: [Movie!]! @relationship(type: \"RATED\", direction: OUT)\n}}\n\ntype Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, born: Date, bornIn: String, imdbIb: String, name: String, poster: String,\n  tmdbId: String, url: String, acted_in: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}}\n\ntype Director @exclude(operations: [CREATE, UPDATE, DELETE]) {{\n  bio: String, bornIn: String, imdbIb: String, name: String, poster: String, tmdbId: String,\n  url: String, directed: [Movie!]! @relationship(type: \"DIRECTED\", direction: OUT)\n}}\n\nPlease generate a Cypher query for the following user question:\n\nInput:\nList films that were directed by 'James Cameron' and featured 'Sigourney Weaver' as an actor. [/INST]\n\nCypher:\n</s>", "completion": "MATCH (d:Director {name: 'James Cameron'})-[:DIRECTED]->(m:Movie) MATCH (a:Actor {name: 'Sigourney Weaver'})-[:ACTED_IN]->(m) RETURN m.title"}
